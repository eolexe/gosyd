- Ура нова версія Го вже майже тут :) На момент цієї доповіді доступний для скачування реліз кандидат 2.
- Давайте перевіримо чи версія 1.6 вже доступна? Звичайно я це зробив завчасно і вже встановив свіженьку версію щоб обкатати нові фішечкі
- Як і всі дот версії мови (1.2, 1.4 , ітд) го зберігає сумісніть з спеціфікацією мови версії 1. Тобто ваш код, як рініше буде компілюватись і не доведеться міняти все підряд, як в деяких інших мовах (небудимо показувати пальцями на свіфт :)) Звичайно мова може обростати повими пакетами та функціями, але існуючий інтерфейс не може бути змінений це закон :) 
Натомість сумісність бінарніків не гарантована, і з релізом нової версії бажано перекомпілювати існуючі додатки.
- Го дуже молода мова програмування в опенсорс вийшла у 2009 році, а в 2012 році вже з’явилась перша мажорна версія 1.0. Як правило нова версія виходить кожні півроку. За 6 років Го захопив сердця та сервери багатьох компаній по світу :) Не оминуло це і нас. https://blog.golang.org/6years
- Починаючи з версії 1.5 для компіляції Го використовується toolchain написаний на Го. Тобто потрібна молодша версія го щоб скомпілювати старшу https://docs.google.com/document/d/1OaatvGhEAq7VseQ9kkavxKNAfepWy2yhPUBs96FGV28/edit
- Як і попередні версії Го , весрія 1.6 підтримує велику кількість операційних систем, Window, Linux, MacOS, Andorid, iOS, etc..
- Також починаючи з версії 1.5 корос компіляція стала супер простою. Якшо раніше для цього треба було настроювати компілятор, то тепер для цього лише треба встановити змінну оточення. env GOOS=windows go build $YOURPACKAGE це стало можливим завдяки тому що Го використовує toolchain написаний на Го.
- Garbage Collector був значно покращений з версії 1.5, в версії 1.6 коре тімка працювала над тим щоб ще більше оптимізувати алгоритми збору сміття в heap.
- Go 1.6 за замовчуванням використовує http2. Так щоб повернутись до http1 доведеться додати відповідні налаштувати клієнта або сервера.
- CGO це фіча Го задопомогою якої можна визивати функції та змінні з існуючих бібліотек, написаних на С. В Го 1.6 змінились правила як Го та С можуть шарити пам’ять алаковану в Го. Ці правила перевіряються в рантаймі, та якщо будь яке з них порушене, програма запанікує з відповідним повідомленням.
- Компілятор в 1.6 майже нічим не відрізняється від попередньої версії, окрім того що парсер не є згенерованим а переписаний в ручну.
- Додались нові перевірки в map, якщо його неправильно використати, система впаде з відповідною помилкою. Наприклад при конкурентній спробі оновити той самий елемент в мапі. Для того щоб зрозуміти деталі цього проісшєствія, краще за все скомпілювати програму з звлюченим рейс детектером.
	`go run -race map.go`
- Для любителів віндовс теж є хороші новини. В версії 1.5 Го програми всиставляли значення глобальної змінної Windows timer resolution з 15 мілісекунд на 1. Що в свою чергу пришвидшувало розряд батареї.
https://msdn.microsoft.com/en-us/library/windows/desktop/dd757624(v=vs.85).aspx
- Вендорінг! Тепер не експерементальний
- LLVM memory sanitizer, -msan , корисна штука для для тестування додатків які використовують С або С++ код
- В загальному перформанс програм на 1.6 трохи збільшиться.
- бібліотека сортування використовує алгоритм який на 10% менше разів викликає методи Less та Swap, та відповідно прискорює сортування. Але не гарантує що однакові елементи будуть розміщенні в тому самому порядку
- В бібліотеці темплейтів теж є невеличі плюшки. Форматування темплейтів має безпосередній ефект на те як данні будуть відображенні. Тому якщо в темплейтів є присутнє пусте місце, або перевід каретки, це так само відіброзиться в кінцевому результаті. За допомогою знаку мінус (-) можна прибрати такі зайві елементи форматування, прицьому покращивши читабельність коду темплейта.
- Всі ви напевно стикаєтесь з gcc. Це така собі солянка/набір компіляторів. Релізи Го та Gcc проектів не співпадають, версія GCC5 буде в собі мати версії gccgo версії Go1.4
- Так само досить багато змін в стандартній бібліотеці Го. Зупинимось на деяких з них:
- bufio пакет який дозволяє читати/писати в файли в/з буфера
- regexp package був і є оптимізованим для конкурентного використання, але ящо дуже багато горутин будуть дьоргати той самий регексм то вони просто в якісь момент починали впирались в мютекс, відповідно перформанс падав. Для цього в regexp паекті додали метод Copy якій шарить більшу частину оригінального об’єкту регукспа але має додатково копію тої частини яка покрита мютексами.
- time package був розумним і став ще трішечки розумнішим, тепер він зарежектить 29-те лютого в невисокосному році. Доречі так само як і 30 лютого І передбачаючі ваше питання 31-е лютого також :)
